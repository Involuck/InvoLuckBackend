name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    name: Install & Cache Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Verify installation
        run: |
          echo "Dependencies installed successfully"
          npm list --depth=0

  lint:
    name: ESLint Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [install]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

  format:
    name: Prettier Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [install]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

  build:
    name: TypeScript Build & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [install]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run typecheck

      - name: Build project
        run: npm run build

      - name: Verify build artifacts
        run: |
          ls -la dist/
          echo "Build completed successfully"
          echo "Build size: $(du -sh dist/)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [install]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [install]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=high --json > audit-report.json || true
          npm audit --audit-level=high

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 7

  pipeline-status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [install, lint, format, build, test, security]
    if: always()

    steps:
      - name: Generate pipeline report
        run: |
          echo "# 🚀 Pipeline Execution Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Install & Cache | ${{ needs.install.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Prettier Format | ${{ needs.format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & TypeCheck | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run:** [\`#${{ github.run_number }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Success summary
        if: |
          needs.install.result == 'success' &&
          needs.lint.result == 'success' &&
          needs.format.result == 'success' &&
          needs.build.result == 'success' &&
          needs.test.result == 'success' &&
          needs.security.result == 'success'
        run: |
          echo "🎉 ALL CHECKS PASSED!"
          echo "✅ Installation successful"
          echo "✅ Code quality verified"
          echo "✅ Format check passed"
          echo "✅ Build successful"
          echo "✅ All tests passing"
          echo "✅ Security audit clean"
          echo "✅ Project is ready!"

      - name: Failure summary
        if: |
          needs.install.result == 'failure' ||
          needs.lint.result == 'failure' ||
          needs.format.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.security.result == 'failure'
        run: |
          echo "❌ PIPELINE FAILED"
          echo "Please check the failed jobs above for details."
          exit 1
