# GitHub Actions CI/CD Pipeline for InvoLuck Backend
# Runs tests, builds, and validates the application on every push and PR

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.18.0'
  MONGODB_VERSION: '7.0'

jobs:
  # Lint and format check
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format -- --check

      - name: 📏 TypeScript type check
        run: npm run typecheck

  # Security audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and test
  test:
    name: 🧪 Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.18.0', '20.x']
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
          MONGO_INITDB_DATABASE: involuck-test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build email templates
        run: npm run email:build

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 🧪 Run tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://test:test123@localhost:27017/involuck-test?authSource=admin
          JWT_SECRET: test-jwt-secret-for-ci-minimum-32-characters
          SMTP_HOST: localhost
          SMTP_PORT: 1025
          SMTP_USER: ""
          SMTP_PASS: ""

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.18.0'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build Docker image
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: involuck-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -e NODE_ENV=production \
            -e MONGODB_URI=mongodb://fake:fake@fake:27017/fake \
            -e JWT_SECRET=test-secret-for-docker-test-minimum-32-characters \
            -e SMTP_HOST=fake \
            -e SMTP_PORT=1025 \
            -p 5000:5000 \
            involuck-backend:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint (should fail gracefully without DB)
          curl -f http://localhost:5000/health || echo "Health check failed as expected without DB"
          
          # Stop container
          docker stop test-container

  # Integration tests with Docker Compose
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Compose
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=integration-test-jwt-secret-minimum-32-characters" >> .env

      - name: 🚀 Start services with Docker Compose
        run: docker-compose up -d mongodb mailhog

      - name: ⏳ Wait for services to be ready
        run: |
          echo "Waiting for MongoDB..."
          timeout 60 bash -c 'until docker-compose exec -T mongodb mongosh --eval "db.adminCommand(\"ping\")" --quiet; do sleep 2; done'
          
          echo "Waiting for MailHog..."
          timeout 30 bash -c 'until curl -f http://localhost:8025; do sleep 2; done'

      - name: 📦 Setup Node.js for integration tests
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          npm run email:build
          npm run build

      - name: 🧪 Run integration tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/involuck?authSource=admin
          JWT_SECRET: integration-test-jwt-secret-minimum-32-characters
          SMTP_HOST: localhost
          SMTP_PORT: 1025

      - name: 🛑 Stop Docker Compose services
        if: always()
        run: docker-compose down -v

  # Deployment preparation
  deploy-prepare:
    name: 📦 Prepare Deployment
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Create deployment artifact
        run: |
          mkdir -p deployment
          echo "${{ steps.meta.outputs.tags }}" > deployment/docker-tags.txt
          echo "${{ github.sha }}" > deployment/git-sha.txt
          echo "$(date -u)" > deployment/build-time.txt

      - name: 📤 Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment/
          retention-days: 30

  # Notification on success/failure
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test, docker-build, integration-test]
    if: always()
    
    steps:
      - name: 📢 Notify success
        if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "✅ All checks passed successfully!"
          echo "Build: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: 📢 Notify failure
        if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "❌ Some checks failed!"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          exit 1
